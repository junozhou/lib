# O(1)就是最低的时空复杂度了，也就是耗时/耗空间与输入数据大小无关，
# 无论输入数据增大多少倍，耗时/耗空间都不变。
# 哈希算法就是典型的O(1)时间复杂度，无论数据规模多大，
# 都可以在一次计算后找到目标（不考虑冲突的话）
# 例子: 理论上哈希表就是O(1)。
# 因为哈希表是通过哈希函数来映射的，所以拿到一个关键字，
# 用哈希函数转换一下，就可以直接从表中取出对应的值。
# 和现存数据有多少毫无关系.
# Set的contains()方法： HashSet的contains返回true，当且仅当equals返回true   ​
# 并且   ​hashCode返回相等的值 ；Set除了比较equals，还比较hashCode
#

# O(1)
def test(num):
    total = 0 # 变量占空间
    for i in range(num):
        total += i
    return total
# total占用空间，但不管total具体的值是多少，它的存储空间都是O(1)

# O(1)
def test(num):
    arr = [] # 变量占空间
    for i in range(num):
        arr.append(i)
    return arr

# arr 有多少数，占多少空间，取决与num多大，即此空间复杂度是O(num)
# 故空间复杂度，要找的就是变量。--1
#   变量是一个常量，它的空间复杂度是一定的，不随输入值而改变，所占用的空间是一定的,那么它的空间复杂度是：O(1)
#   变量是一个arr,list存多个数据的，它数据的数量随输入值改变而改变，空间复杂度是O(n)
# 看有没有递归 --2
#   递归是一层一层往下，每一层的信息保存在递归栈，递归一般有O(n)的空间复杂度，即使没有变量。
# O(1) < O(n) < O(n^2)

# 时间和空间只能二选一
# 面试时：和面试官讲清楚
# 工作时：时间 > 空间
